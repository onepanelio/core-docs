(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{129:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,u=s["".concat(i,".").concat(d)]||s[d]||m[d]||o;return n?r.a.createElement(u,l(l({ref:t},p),{},{components:n})):r.a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(129)),i={title:"Create with Workflow Task",sidebar_label:"Create with Workflow Task",description:"Deploy a model using Workflow Tasks"},l={unversionedId:"reference/inference-apis/create-with-workflow-task",id:"reference/inference-apis/create-with-workflow-task",isDocsHomePage:!1,title:"Create with Workflow Task",description:"Deploy a model using Workflow Tasks",source:"@site/docs/reference/inference-apis/create-with-workflow-task.md",slug:"/reference/inference-apis/create-with-workflow-task",permalink:"/docs/reference/inference-apis/create-with-workflow-task",editUrl:"https://github.com/onepanelio/core-docs/tree/master/docs/reference/inference-apis/create-with-workflow-task.md",version:"current",sidebar_label:"Create with Workflow Task",sidebar:"reference",previous:{title:"Create with Web UI",permalink:"/docs/reference/inference-apis/create-with-web-ui"},next:{title:"Create with Python SDK",permalink:"/docs/reference/inference-apis/create-with-python-sdk"}},c=[],p={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this example, we'll take a pre-existing TensorFlow model and modify it to make it deployable."),Object(o.b)("p",null,"We'll use a workflow to deploy the inference service and, as a bonus, we'll use a transformer to make the input take a base64 image and output a base64 image with the bounding boxes drawn."),Object(o.b)("p",null,"We'll be using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://tfhub.dev/tensorflow/ssd_mobilenet_v2/fpnlite_320x320/1"}),"ssd_mobilenet_v2"),", an object detection model trained on COCO dataset with training images scaled to 320x320."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"To do this you need to download the files from the link above and extract them.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Arrange the files as given below"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Create a directory and give it a name, for this example we'll use ",Object(o.b)("inlineCode",{parentName:"p"},"ssd"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"In it create another directory called ",Object(o.b)("inlineCode",{parentName:"p"},"0001"),",  ",Object(o.b)("em",{parentName:"p"},"this is for the version of the model"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Move the extracted contents inside the version folder, this includes a ",Object(o.b)("inlineCode",{parentName:"p"},"saved_model.pb")," file and the ",Object(o.b)("inlineCode",{parentName:"p"},"variables")," folder.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"For our transformer, you will also need to add a ",Object(o.b)("inlineCode",{parentName:"p"},"label_map.pbtxt")," file.\nSince this model was trained under the COCO dataset, it's label maps are available ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/tensorflow/models/blob/master/research/object_detection/data/mscoco_label_map.pbtxt"}),"here"),"."),Object(o.b)("p",{parentName:"li"}," Our final result is something like this:"))),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"ssd",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"0001",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"saved_model.pb"),Object(o.b)("li",{parentName:"ul"},"label_map.pbtxt"),Object(o.b)("li",{parentName:"ul"},"variables",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"variables.data-00000-of-00001"),Object(o.b)("li",{parentName:"ul"},"variables.index"))))))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Upload the files under your object storage provider ( ",Object(o.b)("strong",{parentName:"p"},"Azure Storage"),", ",Object(o.b)("strong",{parentName:"p"},"S3")," or ",Object(o.b)("strong",{parentName:"p"},"GCS")," ).")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Go to ",Object(o.b)("strong",{parentName:"p"},"Workflows")," > ",Object(o.b)("strong",{parentName:"p"},"Workflow Templates")," > ",Object(o.b)("strong",{parentName:"p"},"Create Template"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Name the template ",Object(o.b)("inlineCode",{parentName:"p"},"deploy")," and then under manifest paste the following:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'entrypoint: main\ntemplates:\n  - dag:\n      tasks:\n        - name: deploy\n          template: deploy\n    name: main\n  - name: deploy\n    resource:\n      successCondition: status.address.url\n      action: create\n      manifest: |\n        apiVersion: "serving.kubeflow.org/v1beta1"\n        kind: "InferenceService"\n        metadata:\n          namespace: "{{workflow.namespace}}"\n          name: "{{workflow.name}}"\n        spec:\n          transformer:\n            containers:\n            - image: onepanel/transformer-tfod-base64:v1.0.0\n              name: kfserving-container\n              env:\n               - name: STORAGE_URI\n                 value: "s3://ssd"\n               - name: model\n                 value: "{{workflow.name}}"\n          predictor:\n            tensorflow:\n              runtimeVersion: "2.5.1"\n              storageUri: "s3://ssd"\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"This will generate the model servers and assign names automatically.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Execute the workflow")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"To test the model, use this ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/onepanelio/python-sdk/blob/master/examples/deploy-and-consume-inference-api.ipynb"}),"JupyterLab notebook")))))}b.isMDXComponent=!0}}]);